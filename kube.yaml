kind: ConfigMap
apiVersion: v1
metadata:
  name: my-conf
data:
  init.sh: |
    #! bin/bash

    echo  "====="
    echo  "BEGIN"
    echo  "====="

    HOST="mongo-0.mongo:27017"
    CUR="${HOSTNAME}.mongo:27017"

    if [[ "${HOST}" != "${CUR}" ]]; then

      until mongosh --host=${HOST} --quiet \
                      --eval="EJSON.stringify(rs.status())" 2>&1 \
                      | grep -v "no replset config has been received"; do
        sleep 1 
      done
      echo "add ${HOSTNAME}.mongo to rs0"
      mongosh --host=${HOST} --quiet --eval="EJSON.stringify(rs.add('${CUR}'))"

    else

      echo "create  rs0"
      until mongosh --quiet --eval "rs.initiate({'_id': 'rs0', 'members': [{'_id': 0, 'host': '${HOST}'}]})"; do
        sleep 1
      done

    fi

    echo "==="
    echo "END"
    echo "==="

    while true; do sleep 1; done
  main.json: |
    {
      "transaction": {
        "db": {
          "dbname": "transactions",
          "user": "postgres",
          "password": "postgres",
          "host": "postgres-db",
          "port": "5432"
        },
        "reddis_address": "transaction-hash",
        "reddis_port": 6379,
        "rpc_address": "transaction",
        "rpc_port": 54321
      },

      "notification": {
        "broker_address": "queue",
        "broker_port": "9092",
        "topic": "notification"
      },

      "account": {
        "reddis_address": "account-hash",
        "reddis_port": 6379,
        "rpc_address": "account",
        "rpc_port": 54321
      },

      "user": {
        "reddis_address": "user-hash",
        "reddis_port": 6379,
        "rpc_address": "user",
        "rpc_port": 54321
      },
      
      "credit": {
        "reddis_address": "localhost",
        "reddis_port": 6379,
        "rpc_address": "credit",
        "rpc_port": 54325,
        "credit_update_period": 15,
        "credit_update_measure": "seconds"
      },

      "auth": {
        "reddis_address": "auth-hash",
        "reddis_port": 6379,
        "rpc_address": "auth",
        "rpc_port": 54321,
        "mock_mail": true
      },

      "mongo": {
        "address": "mongo-db",
        "port": "27017",
        "replicaSet": "rs0"
      }
    }
  gateway_config.json: |
    {
      "listeners": [
        {
          "address": "0.0.0.0",
          "port": 2020,
          "https": false
        }
      ],
      "app": {
        "upload_path": "uploads",
        "threads": 8,
        "max_connections": 100000,
        "max_connections_per_ip": 0,
        "log": {
          "log_path": "./logs",
          "logfile_base_name": "",
          "log_size_limit": 100000000,
          "log_level": "DEBUG"
        },
        "run_as_daemon": false,
        "relaunch_on_error": false,
        "use_gzip": false
      }
    }

---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  ports:
  - port: 27017
    name: peer
  clusterIP: None
  selector:
    app: mongo
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: mongo
  replicas: 3
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongodb
        image: mongo:5.0.9
        command:
          - mongod
          - --replSet
          - rs0
          - --bind_ip_all
        ports:
          - containerPort: 27017
            name: peer

      - name: init-mongo
        image: mongo:5.0.9
        command:
          - bash
          - /config/init.sh
        volumeMounts:
        - mountPath: /config/init.sh
          name: config
          subPath: init.sh
          readOnly: true 
      volumes:
      - name: config
        configMap:
          name: "my-conf"
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-db
spec:
  ports:
  - port: 27017
  selector:
    app: mongo
---

apiVersion: v1
kind: Pod
metadata:
  name: user
  labels:
    app: user
spec:
  containers:
  - name: user
    image: mbilyk/user:v1.0
    imagePullPolicy: IfNotPresent #Never
    volumeMounts:
      - mountPath: /ucu-bank/configs/main.json
        name: config
        subPath: main.json
        readOnly: true 
    ports:
    - containerPort: 54321
      name: user-port
  - name: init-mongo
    image: mongo:5.0.9
  volumes:
    - name: config
      configMap:
        name: "my-conf"
---
apiVersion: v1
kind: Service
metadata:
  name: user
spec:
  ports:
  - port: 54321
  selector:
    app: user

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
spec:
  selector:
    matchLabels:
      app: auth
  replicas: 3
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
      - name: auth
        image: mbilyk/auth:v1.0
        imagePullPolicy: IfNotPresent #Never
        volumeMounts:
          - mountPath: /ucu-bank/configs/main.json
            name: config
            subPath: main.json
            readOnly: true 
        ports:
        - containerPort: 54321
          name: auth-port
      volumes:
      - name: config
        configMap:
          name: "my-conf"
---

apiVersion: v1
kind: Service
metadata:
  name: auth-hash
spec:
  ports:
  - port: 6379
  selector:
    app: auth-hash

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-hash
spec:
  selector:
    matchLabels:
      app: auth-hash
  replicas: 1
  template:
    metadata:
      labels:
        app: auth-hash
    spec:
      containers:
      - name: redis
        image: redis
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: auth
spec:
  ports:
  - port: 54321
  selector:
    app: auth
---

apiVersion: v1
kind: Pod
metadata:
  name: queue
  labels:
    app: queue
spec:
  containers:
  - name: kafka
    image: mak9su4roi/queue
    imagePullPolicy: IfNotPresent #Never
    env:
    - name: KAFKA_CFG_ZOOKEEPER_CONNECT
      value: localhost:2181
    - name: ALLOW_PLAINTEXT_LISTENER
      value: "yes"
    ports:
    - containerPort: 9092
  - name: keeper
    image: bitnami/zookeeper:3.7
    env:
    - name: ALLOW_ANONYMOUS_LOGIN
      value: "yes" 
    ports:
    - containerPort: 2181

---
apiVersion: v1
kind: Service
metadata:
  name: queue
spec:
  ports:
  - port: 9092
  selector:
    app: queue

--- 

apiVersion: v1
kind: Service
metadata:
  name: notification
spec:
  ports:
  - port: 9092
  selector:
    app: notification


---
apiVersion: v1
kind: Pod
metadata:
  name: notification
  labels:
    app: notification
spec:
  containers:
  - name: notification
    image: mbilyk/notification:v1.0
    imagePullPolicy: IfNotPresent #Never
    volumeMounts:
      - mountPath: /ucu-bank/configs/main.json
        name: config
        subPath: main.json
        readOnly: true
      - name: secret-creds
        readOnly: true
        mountPath: "/root/.aws/" 
  volumes:
    - name: config
      configMap:
        name: "my-conf"
    
    - name: secret-creds
      secret:
        secretName: my-secret

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: account
spec:
  selector:
    matchLabels:
      app: account
  replicas: 3
  template:
    metadata:
      name: account
      labels:
        app: account
    spec:
      containers:
      - name: account
        image: mbilyk/account:v1.0
        imagePullPolicy: IfNotPresent #Never
        volumeMounts:
          - mountPath: /ucu-bank/configs/main.json
            name: config
            subPath: main.json
            readOnly: true 
        ports:
        - containerPort: 54321
          name: account-port
      - name: init-mongo
        image: mongo:5.0.9
      volumes:
        - name: config
          configMap:
            name: "my-conf"
---
apiVersion: v1
kind: Service
metadata:
  name: account
spec:
  ports:
  - port: 54321
  selector:
    app: account

---
apiVersion: v1
kind: Service
metadata:
  name: transaction
spec:
  ports:
  - port: 54321
  selector:
    app: transaction
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: transaction
spec:
  selector:
    matchLabels:
      app: transaction
  replicas: 3
  template:
    metadata:
      name: transaction
      labels:
        app: transaction
    spec:
      containers:
      - name: transaction
        image: mbilyk/transaction:v1.0
        imagePullPolicy: IfNotPresent #Never
        ports:
        - containerPort: 54321
        volumeMounts:
          - mountPath: /ucu-bank/configs/main.json
            name: config
            subPath: main.json
            readOnly: true
      volumes:
        - name: config
          configMap:
            name: "my-conf"
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-db
spec:
  ports:
  - port: 5432
  selector:
    app: postgres-db

---

apiVersion: v1
kind: Pod
metadata:
  name: postgres-db
  labels:
    app: postgres-db
spec:
  containers:
  - name: postgres-db
    image: mak9su4roi/postgres-db
    imagePullPolicy: IfNotPresent #Never
    env:
    - name: POSTGRES_USER
      value: postgres
    - name: POSTGRES_PASSWORD
      value: postgres
    - name: POSTGRES_DB
      value: transactions
    ports:
    - containerPort: 5432
---
apiVersion: v1
kind: Pod
metadata:
  name: credit
  labels:
    app: credit
spec:
  containers:
  - name: credit
    image: mbilyk/credit:v1.0
    imagePullPolicy: IfNotPresent #Never
    ports:
    - containerPort: 54325 
    volumeMounts:
      - mountPath: /ucu-bank/configs/main.json
        name: config
        subPath: main.json
        readOnly: true
  volumes:
    - name: config
      configMap:
        name: "my-conf"
---
apiVersion: v1
kind: Service
metadata:
  name: credit
spec:
  ports:
  - port: 54325
  selector:
    app: credit

--- 

apiVersion: v1
kind: Pod
metadata:
  name: gateway
  labels:
    app: uapi
spec:
  containers:
  - name: gateway
    image: mbilyk/gateway:v1.0
    imagePullPolicy: IfNotPresent #Never
    ports:
    - containerPort: 2020
      name: gateway
    volumeMounts:
      - mountPath: /ucu-bank/configs/main.json
        name: config
        subPath: main.json
        readOnly: true
      - mountPath: /ucu-bank/configs/gateway/gateway_config.json
        name: config
        subPath: gateway_config.json
        readOnly: true
      - mountPath: /ucu-bank/logs
        name: empty-log-dir
  volumes:
    - name: config
      configMap:
        name: "my-conf"
    - name: empty-log-dir
      emptyDir: {} 
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: gateway
# spec:
#   ports:
#   - port: 2020
#     name: api-port
#   selector:
#     app: gateway

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
spec:
  selector:
    matchLabels:
      app: uapi
  template:
    metadata:
      labels:
        app: uapi
    spec:
      containers:
      - name: ui
        image: yevhenpanke/ucu24-ui
        ports:
        - containerPort: 80
          name: ui

---
apiVersion: v1
kind: Service
metadata:
  name: uapi
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:951466096062:certificate/1a97ef80-d770-422b-91c9-650def6598fb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
    # this part will make more sense later
    external-dns.alpha.kubernetes.io/hostname: ucu24.com
  labels:
    app: uapi
spec:
  selector:
    app: uapi
  type: LoadBalancer
  ports:
  - name: ui
    port: 80
  - name: gateway
    port: 2020
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
- apiGroups: [""]
  resources: ["services","endpoints","pods"]
  verbs: ["get","watch","list"]
- apiGroups: ["extensions","networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get","watch","list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
- kind: ServiceAccount
  name: external-dns
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      serviceAccountName: external-dns
      containers:
      - name: external-dns
        image: k8s.gcr.io/external-dns/external-dns:v0.10.2
        args:
        - --source=service
        - --source=ingress
        - --domain-filter=ucu24.com # will make ExternalDNS see only the hosted zones matching provided domain, omit to process all available hosted zones
        - --provider=aws
        - --policy=upsert-only # would prevent ExternalDNS from deleting any records, omit to enable full synchronization
        - --aws-zone-type=public # only look at public hosted zones (valid values are public, private or no value for both)
        - --registry=txt
        - --txt-owner-id=Z0518291ISNC7TEVF1Y2
      securityContext:
        fsGroup: 65534 # For ExternalDNS to be able to read Kubernetes and AWS token files

